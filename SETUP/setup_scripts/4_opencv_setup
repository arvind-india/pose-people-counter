#!/bin/bash

# Save current path to go back later
starting_path=$(pwd)

echo "
                           .     .
                        .  |\-^-/|  .    
                       /| } O.=.O { |\ 
                      /´ \ \_ ~ _/ / \`\ 
                    /´ |  \-/ ~ \-/  | \`\ 
                    |   |  /\\\\ //\  |   | 
                     \|\|\/-\"\"-\"\"-\/|/|/
                             ______/ /
                             '------'
                _   _        _  ___                         
      _ __  ___| |_| |_ _  _| ||   \ _ _ __ _ __ _ ___ _ _  
     | '  \/ -_)  _| ' \ || | || |) | '_/ _\` / _\` / _ \ ' \ 
     |_|_|_\___|\__|_||_\_, |_||___/|_| \__,_\__, \___/_||_|
                        |__/                 |___/          
     -------------------------------------------------------
                   github.com/methylDragon

[OPENCV INSTALL FROM SOURCE SCRIPT]

INSTALLS
--------
- OpenCV 3.4.1 (Python 3)
  - With optimisations! (NEON and VFPV3 flags on)
- OpenCV Contrib
- Imutils

WARNINGS
--------
- This build will take HOURS (3-26 hours, depending)
- Ensure that your Raspberry Pi has a heatsink AND a working fan! It'll overheat and crash otherwise!
- Ensure that you've increased the swapspace on your Raspberry Pi to AT LEAST 1 GB

Then type 'ok' and press [enter] to continue
"

while [ -z "$warning_read" ]; do
  read -p "Please read the warning: " answer

  case "$answer" in
    [Oo][Kk]) warning_read="TRUE" ;;
    *) echo -e "\nInvalid response!\n" ;;
  esac
done

# Reset timer
SECONDS=0

echo -e "\n-- INITIALISING INSTALL --"

echo -e "\n-- SETTING PIP DEFAULT TIMEOUT TO 100 --"
export PIP_DEFAULT_TIMEOUT=100

# Activate the ML conda environment

echo -e "\nActivating conda ML environment..." 
source activate ML

# Install OpenCV Dependencies

echo "Updating repository list..."
sudo apt-get update

echo -e "\nInstalling OpenCV dependencies"

sudo apt-get install build-essential cmake pkg-config -y
sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev -y
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev -y
sudo apt-get install libxvidcore-dev libx264-dev -y
sudo apt-get install libgtk2.0-dev -y
sudo apt-get install libatlas-base-dev gfortran -y
sudo apt-get install python-dev python3-dev python-pip python3-pip -y
sudo apt install libcanberra-gtk-module libcanberra-gtk3-module
sudo apt-get clean -y

echo "Installing numpy & matplotlib"
sudo apt-get install python3-numpy python3-matplotlib -y

echo "Done"

# Install OpenCV

cd ~

echo -e "\nAttempting to move old OpenCV builds to *_old_build"
echo "This is to back-up any previous builds just in case (so you can use them and not rebuild them)"

mv ~/opencv-3.4.1 ~/opencv-3.4.1_old_build
mv ~/opencv_contrib-3.4.1 ~/opencv_contrib-3.4.1_old_build

echo -e "\nDownloading OpenCV 3.4.1 and OpenCV Contrib sources"

wget -O opencv.zip https://github.com/opencv/opencv/archive/3.4.1.zip
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.4.1.zip

echo "Extracting archives."
unzip opencv.zip
unzip opencv_contrib.zip

echo "Preparing to build OpenCV"
cd ~/opencv-3.4.1/
mkdir build
cd build


# Compile OpenCV from source

echo "
WARNINGS
--------
- This build will take HOURS (3-26 hours, depending)
- Ensure that your Raspberry Pi has a heatsink AND a working fan! It'll overheat and crash otherwise!
- Ensure that you've increased the swapspace on your Raspberry Pi to AT LEAST 1 GB

PLEASE MONITOR YOUR BUILD AS IT IS RUNNING. We don't want any fires or destroyed Raspberry Pis!!

Type 'ok' and press [enter] to continue
"

while [ -z "$last_chance" ]; do
  read -p "This is your LAST CHANCE to back out if you haven't! " answer

  case "$answer" in
    [Oo][Kk]) last_chance="TRUE" ;;
    *) echo -e "\nInvalid response!\n" ;;
  esac
done

read -p "I'm serious! You ready? Press [enter] to continue"

echo -e "\nOK! Here we goooooooo!!!!!!!!! Good luck! See you on the other side!

                 .     .
              .  |\-^-/|  .    
             /| } O.=.O { |\ "

echo -e "\n\nConfiguring build script..."

sudo make clean
cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D PYTHON3_EXECUTABLE=$(which python) \
    -D PYTHON3_LIBRARY=~/miniconda3/envs/ML/lib/ \
    -D PYTHON3_PACKAGES_PATH=$(python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
    -D PYTHON3_INCLUDE_DIR=$(python -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.4.1/modules \
    -D ENABLE_NEON=ON \
    -D ENABLE_VFPV3=ON \
    -D WITH_GTK=ON \
    -D BUILD_TESTS=OFF \
    -D BUILD_NEW_PYTHON_SUPPORT=ON \
    -D BUILD_PYTHON_SUPPORT=ON \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D BUILD_EXAMPLES=OFF ..

echo -e "COMPILING! This will take awhile..."
echo -e "\nDual core build - recommended for RPi 2/3)"
echo -e "\nIf you're greedy, go into this script and change it to a quad-core build. But I wouldn't recommend it..."

make -j2

echo "WOO! We're out of the rut! Installing OpenCV now..."
sudo make install

# Installing more useful modules

pip install imutils

sudo ldconfig
cd ~

echo "Goodbye!"

# Validate the install

read -p "== ! TIME TO VALIDATE THE OPENCV INSTALL ! ==
Press [enter] to continue"

py_script="
# Try-except block is here just in case anything didn't install properly
try:
	import tensorflow
	import cv2
	import imutils
except:
	pass

# Initialise a counter to report back errors later on
error_count = 0

print()
print('---------------------- TESTING INSTALLATION NOW! ----------------------')

# Test all packages, report back if there's an error

print()
print('OpenCV Version: ')

try:
	print(cv2.__version__)
except:
	print('ERROR! OpenCV did not install correctly')
	error_count += 1
print()
print('Imutils Version: ')

try:
	print(imutils.__version__)
except:
	print('ERROR! Imutils did not install correctly')
	error_count += 1
print()

# Sum-up
if error_count == 0:
	print('All packages installed correctly!')
else:
	print('ERROR!', error_count, 'package(s) did not install correctly! Do troubleshoot, or try again as administrator!')
print()
"

python -c "$py_script"

echo "
                 .     .
              .  |\-^-/|  .    
             /| } O.=.O { |\ 

                   ***

    == ! OPENCV INSTALL COMPLETE ! ==
== GO FORTH AND BUILD MARVELOUS THINGS ==

             - ! CH3EERS ! -
"

# Print time elapsed
if (( $SECONDS > 3600 )) ; then
    let "hours=SECONDS/3600"
    let "minutes=(SECONDS%3600)/60"
    let "seconds=(SECONDS%3600)%60"
    echo -e "\n\nCompleted in $hours hour(s), $minutes minute(s) and $seconds second(s)" 
elif (( $SECONDS > 60 )) ; then
    let "minutes=(SECONDS%3600)/60"
    let "seconds=(SECONDS%3600)%60"
    echo -e "\n\nCompleted in $minutes minute(s) and $seconds second(s)"
else
    echo -e "\n\nCompleted in $SECONDS seconds"
fi

# Restart bash to source ~/.bashrc and go back to starting path

cd "$starting_path"
exec bash
